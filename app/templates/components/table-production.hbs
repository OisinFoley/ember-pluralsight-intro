{{!--
  <label>Product  : </label>{{model.[10].ProductName}}<br>
  <label>Dimension : </label> {{#link-to 'production.dimension' model.[10].DimensionName  }}{{model.[10].DimensionName}}{{/link-to}} <br>
  <label>Boards : </label>{{model.[10].BoardsSum}}<br>
  <label>BoardFeet: </label>{{model.[10].BoardFeetSum}}<br>
--}}


  <thead>
  <tr>
    {{!-- <th>Dimensions</th>
    <th>Boards</th>
    <th>BoardFeet</th> --}}
    {{table-th name="Dimension" current_sort=sort_by sort_by="default" sort_data=(action 'sort_data') }}
    {{table-th name="Boards"    current_sort=sort_by sort_by="boards" sort_data=(action 'sort_data')}}
    {{table-th name="BoardFeet" current_sort=sort_by sort_by="boardfeet" sort_data=(action 'sort_data')}}
    {{!-- <th>{{fa-icon "cogs"}}</th> --}}
    {{#table-th}}{{fa-icon "cogs"}}{{/table-th}}
    <th>Volume</th>
  </tr>

  </thead>
  <tbody>
  <tr class="total">
    <td>All Dimensions</td>
    <td>{{total_boards}}</td>
    <td>{{format-number total_boardfeet precision=2}}</td>
  </tr>
  {{#each sorted_model as |row|}}
    <!--we can't use an operand during the check, but we can use truthy falsy checks to see if the value is > 0...
        a value of zero would be falsy(along with null, undefined, empty array etc..),
        so we apply the class of zero which gives it the gray colour we see -->

    <!--we're also now nesting an expression, checking greater than 10, resulting in gray for anything < 10-->
    {{!-- <tr class="{{if (lt row.BoardsSum 10 && gt row.BoardsSum 5) "" "zero"}}"> --}}
    {{!--   <tr class="{{if (lt row.BoardsSum 10) (if (gt row.BoardsSum 5) ) "" "zero"}}"> --}}
    {{!--  <tr class="{{if (lt row.BoardsSum 10) if (gt row.BoardsSum 5)  "" "zero"}}"> --}}
    {{!-- <tr class="{{if (gt row.BoardsSum 10 ) "" "zero"}}"> --}}

    <tr class="{{row-class row}}">




      <td>
        {{#link-to 'production.dimension' row.DimensionID}}
          {{row.DimensionName}}
        {{/link-to}}
        {{!-- {{log row.DimensionName.length}} --}}
      </td>
      <!--because we've started using a named computed property in /models/production.js
      we can now stop using this awkward property name from the JSON file -> BoardsSum
      and simply use the alias provided in the model, that being 'boards'-->
      {{!-- <td class="quantity">{{row.BoardsSum}}</td> --}}
      <td class="quantity">{{row.boards}}</td>



      <!--here, precision is what we call a named parameter - we're using ember-accounting addon for this-->
      {{!-- <td class="quantity">{{format-number row.BoardFeetSum precision=2}}</td> --}}
      <!--//replacing the above with a macro from our /models/production.js file-->

      <td class="quantity">{{format-number row.boardfeet precision=2}}</td>
      {{!-- <td><input type="checkbox" disabled={{eq row.BoardsSum 0}}></td> --}}
      <td>
        {{#link-to 'production.dimension' row.DimensionID}}
          {{fa-icon 'search'}}
        {{/link-to}}
      </td>

      <td> {{row.volume}}  </td>

      {{!-- {{debugger}} --}}

    </tr>
  {{/each}}
  </tbody>